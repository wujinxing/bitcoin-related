					多账户分层确定性钱包


一、 基础定义：
	Bip44使用Bip32的具体算法，定义以下5级路径：
	m / purpose' / coin_type' / account' / change / address_index
	其中带“'”的表明使用困难模式(?)推导。

	1. Purpose：
		该级是一个常量，按照BIP43的推荐定为“44'(0X8000002C)”，表明节点的子树使用这个约定。

	2. Coin type：
		使用一个主节点（seed）来表示不限数量的各种独立的加密电子货币，但是使用相同的空间来表示不同的加密电子货币有一些缺陷。
		这级节点为每种币种创建一个独立的子树来避免在不同的加密电子货币中重用地址，同时增强了隐私性。
		币种同样是个常量，加密电子货币的开发者可以申请和注册没有使用的数字。
		已经注册的币种（http://doc.satoshilabs.com/slips/slip-0044.html）：
			0(0X80000000)：Bitcoin，比特币
			1(0X80000001)：Testnet (all coins)，比特币测试网络
			2(0x80000002)：Litecoin，莱特币
			3(0x80000003)：Dogecoin，狗币

	3. Account：
		这一级将币种对应的空间进行切割，以供不同的用户独立使用，因此钱包不会将不同帐户的“钱”搞混。
		用户可以使用这些帐户来像使用银行帐户的特性一样组织各种基金；用来捐款的（所有地址可以考虑公开），用来存储的，用来日常花销的等等。
	
		帐户使用从0开始顺序增长的数字。这个数值可以像Bip32中子节点的序号一样进行推导。

		软件应该禁止在一个帐户没有任何交易历史（该帐户的地址都没有使用过）时再创建新的帐户。
	
		软件在从外部导入一个“seed”时需要发现所有已经使用的帐户，后方有该算法的描述。

	4. Change：
		常量0用于外部链地址，常量1用于内部链地址（比如找零地址）。
		外部链地址用户在钱包外部进行公开（如：用于接收支付）。
		内部链地址用于钱包内部接收找零等用途，不进行公开。

	5. Index：
		像Bip32中一样，使用从0开始顺序增长的数字。


二、 帐户发现：
	当从外部引入一个主节点的seed时，软件应当按照以下方式来发掘其中的帐号：
	1. 计算第一个帐户节点（index=0）。
	2. 计算该帐户的外部链节点。
	3. 扫描外部链地址，尊重以下间隙限制部分的描述。
	4. 如果没有发现外部链的任何交易，停止发掘。
	5. 如果发现有一些交易，将帐户序号加1后重复以上步骤。

	* 这个算法成功的前提是软件在一个帐户没有任何交易时不允许创建新的帐户。

	* 这个算法只关注交易历史而不是帐户余额，因此有可能帐户中余额为0但是算法仍然会继续发掘。


三、 地址间隙限制：
	地址间隙限制目前设置为20。如果软件在一个位置发掘20次没有找到已使用的地址，那么该位置被认为是没有已使用的地址，并且会停止继续发掘
	在发掘时只扫描外部链地址，因为内部链地址只能收到相关联的外部链地址发来的币。

	钱包软件应该在用户试图违反该限制生成新的外部链地址时提出警告。



关联内容：确定性钱包中的Purpose字段（BIP-0043）

