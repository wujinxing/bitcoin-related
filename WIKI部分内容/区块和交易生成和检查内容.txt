Block头部信息构成：
	Version：版本号（4字节）
	PrevBlockHash：上一区块的hash值（32字节）
	MerkleRoot：交易数据打包行程的hash（32字节）
	Time：Unix时间戳（4字节）
	Bits：难度值（4字节）
	Nonce：随机数（4字节）

新Block诞生过程：
	1. 节点监听全网交易，通过验证的交易进入节点的内存池，并更新交易数据的Merkle Hash值。
	2. 更新时间戳。
	3. 尝试不同的随机数（Nonce），进行hash计算。
	4. 重复该过程至找到合理的hash。
	5. 打包Block：先装入Block meta信息，然后加入交易数据。
	6. 对外广播新的Block。
	7. 其它节点验证通过后，链接至Block Chain，主链高度加一，然后切换至新Block后面继续挖矿。

Best Chain选择：按照以下规则运作的节点，称为诚实节点（Honest Nodes）。
	1. 不同高度的分支，总是接受最高的分支。
	2. 相同高度的，接受难度最大的。
	3. 高度相同且难度一致的，接收时间最早的。
	4. 所有均相同，则按照从网络接收的顺序。
	5. 等待Block Chain高度加一，则重新选择Best Chain。

分支博弈：
	首先假设所有的节点：
		1. 都是理性的，追求收益最大化。
		2. 都是不诚实的，且不惜任何手段获取利益。
	为了降低、逃避收益不被认可的风险（零收益），节点会进行联合一起挖某个分支，试图成为最长的分支或保持最长分支优势，因此整体趋势就是只存在一个主干分支。


Transactions:
	Transaction包含两个集合：
		1. Transaction池：一个无序的、尚未被链上的blocks收录的交易集合。
		2. 孤立的Transaction：因为一个或多个input交易丢失导致不能收录到池中的交易。

Blocks：
	这里包含3中类型的区块：
		1. 主分支中的区块：在这些区块中的交易都被认为是经过初步确认的。
		2. 分支中的区块：这些区块被初步确认为废弃，无法成为主区块。
		3. 孤立的区块：这些是和主区块没有任何关联的，一般是由于上个区块或之前的多个区块遗失导致。

	前两类区块以创世块为根形成了一个树，通过上一区块的hash值进行关联。将分支上的区块难度相加，主分支拥有最大的总难度值。

难度变动：
	每2016个区块变动一次难度。设计上大约2周变动一次。
	一旦达到了2016个区块，会计算这些区块生成使用的时间。实际使用的时间和预计时间之间的差异控制在[2周/4， 2周*4]之间。
	取得之前2周的难度目标，将它乘以“实际用时/目标计划用时（2周的秒数）”
			新的难度目标 = 旧的目标 * 2016个块的用时 / 2周
	如果之前的区块集合完成的过快，那么目标值会被降低以确保生成新区块时会使用更多的时间。反之亦然。
	这种难度震荡的方法围绕2周的目标值进行。

挖矿奖励：
	挖矿奖励每210000各区块变动一次。挖矿奖励是一个和区块高度相关的公式，使用64位整数按照以下操作计算：
			(50 * 100000000) >> (height / 210000)
	
	挖矿奖励以50BTC开始，210000个块之后降为25BTC，之后会在420000各块之后降为12.5BTC，最终在6930000各块之后降为0聪。
	所有coinbase交易总结会生成2099999997690000聪，合计2100万BTC。
	
“tx”信息：
	以下信息保证了一个单独的Transaction：
		 1. 句法正确性检查。
		 2. 确保输入列表和输出列表都不为空。
		 3. 区块大小检查。bytes < MAX_BLOCK_SIZE。
		 4. 所有输出的金额，以及总金额，必须在合法的范围内。
		 5. 确保输入中不包含hash为0，n为-1（coinbase交易）的。
		 6. 检查锁定时间“nLockTime <= INT_MAX”，大小“bytes >= 100”（一个合法的交易需要至少100字节），并且脚本中的操作数不能超过2个。
		 7. 拒绝“非标准”的交易：脚本操作除了在栈中推送数据外不做其它的事情(?)，或者公钥脚本不是常用的两种形式。
			* 这条对客户端来说不是硬性要求。
		 8. 拒绝和池中已有交易相同的交易，或者在主分支上的块中已有的交易。
		 9. 对于任意输入来说，如果它使用了任何在池中的交易的输出，那么拒绝这个交易。（使用未确定的交易？）
		10. 对于任意输入，在主分支和交易池中查找所用到的交易输出。如果输出交易无法找到，那它是一个孤立的交易。
			如果在孤立交易中找到了匹配的交易，则将它添加到孤立交易中。
		11. 对于任意输入，如果使用了coinbase做为输入（例如：只有一个输入，hash=0，n=-1），那么必须要有至少100个确认(COINBASE_MATURITY)；否则拒绝该交易。
		12. 如果输入中使用的交易找不到（不存在或者已花费），则拒绝该交易。
		13. 通过输入中使用的交易获取输入的币值，确定各输入的币值和总输入都在合法的范围内。
		14. 拒绝输入总额小于输出总额的交易。
		15. 拒绝交易费（总输入减去总输出）过低的交易进入一个空的区块。
		16. 验证每个输入的公钥脚本，拒绝错误的交易。
		17. 以上都通过了则添加到交易池中。（交易放到内存池中后，需要进行一项额外检查，要确保coinbase的值不能超过挖矿奖励和矿工费的和。）
		18. 如果是自己的则加到钱包中(?)。
		19. 将交易发送到网络中。
		20. 对于使用当前交易作为自己输入的孤立交易，按照所有步骤递归检查孤立交易。

一些规则的解释：
	很多规则都是自解释的，本节解释了为什么少量的明确的规则是合适的。


区块信息：
	以下信息保证了一个独立的区块。
	 1. 语法正确性检查。
	 2. 拒绝和三种格式中任何一个重复的区块。
	 3. 交易列表不能为空。
	 4. 区块hash必须满足“nBits”的工作量证明的要求。
	 5. 区块时间戳不能超出当前时间2小时。
	 6. 第一个交易必须是coinbase，剩余的所有交易都不能是coinbase。
	 7. 对于任何的交易，按照“2-4”步骤中的要求逐个进行检查。
	 8. coinbase交易的脚本长度（scriptSig）必须在2-100之内。
	 9. 如果交易中脚本操作数总和超过MAX_BLOCK_SIGOPS，则拒绝。sig opcounts > MAX_BLOCK_SIGOPS
	10. 检查Merkle根hash。
	11. 检查前一个交易（prev hash指定的交易）是在主干还是分支。如果不在主干，将本区块标记为孤立区块，之后在该区块的来源网络中追溯第一个孤立区块。
		Check if prev block (matching prev hash) is in main branch or side branches. If not, add this to orphan blocks, then query peer we got this from for 1st missing orphan block in prev chain; done with block
	12. 检查“nBits”值是否符合难度要求。
	13. 如果时间戳是过去11个或更多区块的中间值则拒绝该区块（不能超出当前时间2小时的限制）。
	14. 对于某些旧的区块（如：下载初始块），检查hash是否重复。
	15. 将区块加入的链上。可能出现以下3种情况：
		（1） 区块是主干的延伸。
		（2） 区块延长了一个分支，但是并没有提供足够使它变为主分支的难度。
		（3） 区块延长了一个分支，并且使它成为了主分支。
	16. 第一种情况中，添加到主分支：
		（1） 对于所有非奖励交易（非coinbase交易），进行以下操作：
				  1. 检查所有的输入，在主分支上找到想过的输出交易，如果有缺失的则拒绝。
				  2. 对于所有的输入，如果使用了之前交易中的第n个交易(“nth”)，但是那个交易并没有“n+1”个输出，则拒绝。
				  3. 如果使用coinbase交易做为输入，那么必须至少COINBASE_MATURITY(100)个确认，否则拒绝。
				  4. 检查所有输入的加密签名，如果不正确则拒绝。
				  5. 如果输入中使用主分支上某个已经花费掉的交易，则拒绝。
				  6. 获取关联的输出的币值，要求各输入和它们的总和都必须在合法范围内。
				  7. 拒绝总输入小于总输出的交易。
		（2） 如果coinbase值大于挖矿收入和手续费总和则拒绝该交易。
		（3） 如果通过了以上检查：
		（4） 对于所有的交易，如果是自己的则加入到钱包中。（"Add to wallet if mine"）
		（5） 从交易池中去除已经添加到区块中的交易。
		（6） 将区块广播的网络中。
		（7） 如果拒绝了该区块，那么该区块不能做为主分支的部分进行统计。
	17. 第二种情况中，将区块添加到一个分支上，不需要进行任何操作。
	18. 第三种情况，一个分支变成了主干：
		（1） 找到主干和分支分叉的区块。
		（2） 将当前分支区块定义为主区块。
			  Redefine the main branch to only go up to this fork block
		（3） 对分支上的所有区块，从成为分支的节点开始，添加到主分支中：
				  1. 进行分支检查的“3-11”步骤的检查。
				  2. 对于所有非coinbase交易，进行以下操作：
						 1. 检查所有的输入，在主分支上找到想过的输出交易，如果有缺失的则拒绝。
						 2. 对于所有的输入，如果使用了之前交易中的第n个交易(“nth”)，但是那个交易并没有“n+1”个输出，则拒绝。
						 3. 如果使用coinbase交易做为输入，那么必须至少COINBASE_MATURITY(100)个确认，否则拒绝。
						 4. 检查所有输入的加密签名，如果不正确则拒绝。
						 5. 如果输入中使用主分支上某个已经花费掉的交易，则拒绝。
						 6. 获取关联的输出的币值，要求各输入和它们的总和都必须在合法范围内。
						 7. 拒绝总输入小于总输出的交易。
				  3. 如果coinbase值大于挖矿收入和手续费总和则拒绝该交易。
				  4. 如果通过了以上检查：
				  5. 对于所有的交易，如果是自己的则加入到钱包中。（"Add to wallet if mine"）
		（4） 如果因为任何一点拒绝了该操作，则保留原来的主分支。done with block
		（5） 对于原来主分支上的所有区块，从页节点变成分支区块的子节点：（ from the leaf down to the child of the fork block）
				  1. 对区块中的任何非coinb交易：
						1. 进行交易检查中的“2-9”步骤中除了第8步之外的检查，只在交易池中查找非主分支的重复的交易。 
						Apply "tx" checks 2-9, except in step 8, only look in the transaction pool for duplicates, not the main branch
						2. 如果通过检查则加入到交易池中，否则继续检查下一个。
		（6） 对新的主分支中的所有区块，从枝干到叶子节点：
				  1. 从交易池中删除和区块中的交易重复的项。
		（7） 将区块广播到网络中。
	19. 对于当前区块所关联的所有孤立区块，递归进行以上所有步骤的检查。




